<?php

/**
 * @file
 * Contains dynamic_banner.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function dynamic_banner_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        // Main module help for the dynamic_banner module.
        case 'help.page.dynamic_banner':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Generates a block to place banners on specific paths. 
                    It also introduces new Entity Type Dynamic Banner which can be used to 
                     define multiple type of banners and configure them in block\'s configuration 
                     independently of the other blocks\' instances in the same region or different.') . '</p>';

            return $output;

        default:
    }
}

/**
 * Implements hook_theme().
 */
function dynamic_banner_theme() {
    $theme = [];

    $theme['dynamic_banner_banner'] = [
        'render element' => 'elements',
        'file' => 'dynamic_banner.page.inc',
        'template' => 'dynamic-banner-banner',
    ];
    $theme['dynamic_banner_slideshow'] = [
        'render element' => 'elements',
        'file' => 'dynamic_banner.page.inc',
        'template' => 'dynamic-banner-slideshow',
    ];

    return $theme;
}

/**
 * Implements hook_theme_suggestions_dynamic_banner_slideshow().
 */
function dynamic_banner_theme_suggestions_dynamic_banner_slideshow(array $variables) {
    $name = 'dynamic_banner_slideshow__';

    return generate_dynamic_banner_suggestions($name, $variables);
}

/**
 * Implements hook_theme_suggestions_dynamic_banner_banner().
 */
function dynamic_banner_theme_suggestions_dynamic_banner_banner(array $variables) {
    $name = 'dynamic_banner_banner__';

    return generate_dynamic_banner_suggestions($name, $variables);
}

/**
 * Generates suggestions based on the dynamic banner's block configuration and other keys
 * set in the block's build function.
 *
 * @param $name string to prefix with every suggestion
 * @param $variables theme variables
 *
 * @return array suggestions
 */
function generate_dynamic_banner_suggestions($name, $variables){
    $suggestions = [];

    $elements = $variables['elements'];
    $config = $elements['#configuration'];

    $instance_suggestion = $name . (isset($config['instance_id'])?
            $config['instance_id'] : 'dynamicbanner');

    $suggestions[] = $instance_suggestion;

    if(isset($config['override'])) {
        $suggestions[] = $instance_suggestion . '_' . ($config['override'] == TRUE ? 'overridden' : 'default');
    }

    if(isset($elements['#library_name'])) {
        $suggestions[] = $library_suggestion = $name .$elements['#library_name'];
        if(isset($config['override'])) {
            $suggestions[] = $library_suggestion . '_' . ($config['override'] == TRUE ? 'overridden' : 'default');
        }

        $suggestions[] = $lib_instance = $instance_suggestion .'_'. $elements['#library_name'];

        if(isset($config['override'])) {
            $suggestions[] = $lib_instance . '_' . ($config['override'] == TRUE ? 'overridden' : 'default');
        }
    }

    return $suggestions;
}

/**
 * Implements hook_preprocess_entity_add_list().
 */
function dynamic_banner_preprocess_entity_add_list(array &$variables) {
    $entityManager = \Drupal::service('entity_type.manager');

    foreach ($entityManager->getStorage('dynamic_banner_type')->loadMultiple() as $entity) {
        $variables['bundles'][$entity->id()]['description'] = [
            '#markup' => $entity->getDescription()
        ];
    }
}

/**
 * Implements hook_dynamic_banner_add_libraries().
 */
function dynamic_banner_dynamic_banner_add_libraries() {
    return [
        'bxslider' => [
            'name' => 'bxslider (Default)',
            'library' => 'dynamic_banner/dynamic_banner.bxslider',
            'classes' => ['bxslider']
        ]
    ];
}
